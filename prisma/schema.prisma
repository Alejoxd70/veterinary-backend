// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  roleId    Int
  role      Role       @relation(fields: [roleId], references: [id])
  adoptions Adoption[]
  petDates  PetDate[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  orders    Order[]
  Pet       Pet[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  users       User[]
  permissions PermissionRole[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  roles       PermissionRole[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
}

model PermissionRole {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model Pet {
  id          Int        @id @default(autoincrement())
  name        String
  age         Int
  type        String
  breed       String
  description String?
  imageUrl    String?
  latitude    Float?
  longitude   Float?
  telephone   String?
  idUser      Int?
  user        User?      @relation(fields: [idUser], references: [id])
  status      PetStatus  @default(AVAILABLE)
  adoptions   Adoption[]
  dates       PetDate[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

enum PetStatus {
  AVAILABLE
  ADOPTED
  PENDING
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  imageUrl    String?
  price       Float
  stock       Int
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model Adoption {
  id        Int      @id @default(autoincrement())
  userId    Int
  petId     Int
  adoptedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  pet       Pet      @relation(fields: [petId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PetDate {
  id          Int      @id @default(autoincrement())
  petId       Int
  userId      Int
  date        DateTime @default(now())
  title       String
  description String?
  pet         Pet      @relation(fields: [petId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
  DELIVERED
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  items           OrderItem[]
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  user            User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
